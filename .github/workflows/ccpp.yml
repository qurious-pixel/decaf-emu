name: C/C++ CI

on: [push, pull_request]

jobs:

  ubuntu-build:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false

    env:
      VCPKG_BINARY_SOURCES: 'clear;nuget,GitHub,readwrite'
      VCPKG_BUILD_TYPE: 'release'
      VCPKG_ROOT: '${{github.workspace}}/libraries/vcpkg'
      os: ubuntu-20.04
      compiler: gcc
      version: 10
      mono: mono
      vulkan-version: 1.2.182.0
      qt-version: 5.15.0
      
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Initialise
      run: |
        mkdir build 
        echo ${{runner.name}}

    - name: Install Dependencies (Ubuntu)
      run: |
        cd build
        wget -qO - http://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo apt-key add -
        sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-bionic.list http://packages.lunarg.com/vulkan/lunarg-vulkan-bionic.list
        sudo apt-add-repository ppa:cginternals/ppa
        sudo apt-get update
        sudo apt-get install -y cmake vulkan-sdk python3-setuptools mesa-common-dev libglu1-mesa-dev ninja-build libcurl4-openssl-dev libsdl2-dev libssl-dev zlib1g-dev libuv1-dev libc-ares-dev libavcodec-dev libavfilter-dev libavutil-dev libswscale-dev
        if [ "${{ env.compiler }}" = "gcc" ]; then
          sudo apt-get install -y g++-${{ env.version }}
        else
          sudo apt-get install -y clang-${{ env.version }}
        fi
        pip3 install wheel
        pip3 install aqtinstall
        python3 -m aqt install ${{ env.qt-version }} linux desktop


    - name: Setup Environment (Ubuntu)
      run: |
        if [ "${{ env.compiler }}" = "gcc" ]; then
          echo "CC=gcc-${{ env.version }}" >> $GITHUB_ENV
          echo "CXX=g++-${{ env.version }}" >> $GITHUB_ENV
        else
          echo "CC=clang-${{ env.version }}" >> $GITHUB_ENV
          echo "CXX=clang++-${{ env.version }}" >> $GITHUB_ENV
        fi
        echo "QTDIR=$PWD/build/${{ env.qt-version }}/gcc_64" >> $GITHUB_ENV
        echo "VULKAN_SDK=$PWD/vulkan" >> $GITHUB_ENV


    - name: Configure (Ubuntu)
      run: |
        cd build
        cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DDECAF_BUILD_TOOLS=ON -DDECAF_VULKAN=ON -DDECAF_QT=ON -DCMAKE_PREFIX_PATH=$QTDIR -DCMAKE_INSTALL_PREFIX=install ..
    
    - name: Build
      run: |
        cd build
        cmake --build . --config Release -j 2 --target install

    - uses: actions/upload-artifact@master
      with:
        name: decaf-emu-${{ env.os }}
        path: build/install

  appimage-build:
    runs-on: ubuntu-20.04
    needs: [ubuntu-build]
    strategy:
      fail-fast: false

    env:
      os: ubuntu-20.04
      
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          name: "decaf-emu-${{ env.os }}"
      - name: find files
        run: |
          echo "working dir $PWD"
          ls -al .
          
  create-release:
    needs: [ubuntu-build, appimage-build]
    runs-on: "ubuntu-20.04"
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v2

      - name: Download Artifacts
        uses: actions/download-artifact@v2

      - name: Upload
        shell: bash
        run: |
          mkdir artifacts/
          files=$(find . -name "decaf-emu-*" ! -iname "*.zip")
          for f in $files; do
            echo "Compressing $f"
            (cd $(basename $f) && zip -r ../artifacts/$(basename $f).zip *)
          done
          ls -al artifacts/
          wget -c https://github.com/tcnksm/ghr/releases/download/v0.14.0/ghr_v0.14.0_linux_amd64.tar.gz
          tar xfv ghr_v0.14.0_linux_amd64.tar.gz
          ghr_v0.14.0_linux_amd64/ghr -u ${{ github.repository_owner }} -r decaf-emu -recreate -n 'decaf-emu CI builds' -b "Corresponding commit: ${{ github.sha }}" release artifacts/
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
