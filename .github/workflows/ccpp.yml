name: C/C++ CI

on: [push, pull_request]

jobs:
  build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        name: [ubuntu-20.04-gcc-9]
        include:
          - name: ubuntu-20.04-gcc-9
            os: ubuntu-20.04
            compiler: gcc
            version: "9"
            mono: 'mono'
          #- name: windows-2019
          #  os: windows-2019
          #  compiler: cl
          #  mono: ''

    env:
      VCPKG_BINARY_SOURCES: 'clear;nuget,GitHub,readwrite'
      VCPKG_BUILD_TYPE: 'release'
      VCPKG_ROOT: '${{github.workspace}}/build/vcpkg'

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Initialise
      run: mkdir build

    - uses: actions/checkout@v2
      with:
        repository: 'microsoft/vcpkg'
        path: 'build/vcpkg'

    - name: 'Setup vcpkg (Ubuntu)'
      if: startsWith(matrix.os, 'ubuntu')
      run: ./build/vcpkg/bootstrap-vcpkg.sh

    - name: 'Setup vcpkg (Windows)'
      if: startsWith(matrix.os, 'windows')
      run: ./build/vcpkg/bootstrap-vcpkg.bat

    - name: 'Setup NuGet Credentials'
      shell: 'bash'
      run: >
        cd build &&
        ${{ matrix.mono }} `./vcpkg/vcpkg fetch nuget | tail -n 1`
        sources add
        -source "https://nuget.pkg.github.com/decaf-emu/index.json"
        -storepasswordincleartext
        -name "GitHub"
        -username "decaf-emu"
        -password "${{ secrets.GITHUB_TOKEN }}"
        -Verbosity "detailed"

    - name: Install Dependencies (Ubuntu)
      if: startsWith(matrix.os, 'ubuntu')
      run: |
        cd build
        wget -qO - http://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo apt-key add -
        sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-bionic.list http://packages.lunarg.com/vulkan/lunarg-vulkan-bionic.list
        sudo apt-add-repository ppa:cginternals/ppa
        sudo apt-get update
        sudo apt-get install -y cmake vulkan-sdk python3-setuptools nasm mesa-common-dev libglu1-mesa-dev ninja-build
        if [ "${{ matrix.compiler }}" = "gcc" ]; then
          sudo apt-get install -y g++-${{ matrix.version }}
        else
          sudo apt-get install -y clang-${{ matrix.version }}
        fi
        pip3 install wheel
        pip3 install aqtinstall
        python3 -m aqt install 5.15.0 linux desktop

    - name: Load Cached Vulkan SDK (Windows)
      id: cache-vulkan-windows
      if: startsWith(matrix.os, 'windows')
      uses: actions/cache@v1
      with:
        path: C:/VulkanSDK/1.2.182.0
        key: ${{ runner.os }}-vulkan-1.2.182.0

    - name: Install Vulkan SDK from web (Windows)
      if: startsWith(matrix.os, 'windows') && steps.cache-vulkan-windows.outputs.cache-hit != 'true'
      shell: powershell
      run: |
        mkdir "C:\\VulkanSDK"
        cd "C:\\VulkanSDK"
        Invoke-WebRequest "https://sdk.lunarg.com/sdk/download/1.2.182.0/windows/VulkanSDK-1.2.182.0-Installer.exe?u=" -OutFile "VulkanSDK.exe"
        Start-Process -FilePath VulkanSDK.exe -Wait -PassThru -ArgumentList @("/S");
        cd "C:\\VulkanSDK\\1.2.182.0"
        Remove-Item -Force -Recurse Bin32
        Remove-Item -Force -Recurse Demos
        Remove-Item -Force -Recurse Lib32
        Remove-Item -Force -Recurse Templates
        Remove-Item -Force -Recurse Tools
        Remove-Item -Force -Recurse Tools32
        Remove-Item -Force -Recurse Third-Party
        Remove-Item -Force Uninstall.exe
        Remove-Item -Force Bin\\VkLayer*
        Remove-Item -Force Lib\\shaderc*
        dir

    - name: Load Cached Qt (Windows)
      id: cache-qt-windows
      if: startsWith(matrix.os, 'windows')
      uses: actions/cache@v1
      with:
        path: C:/Qt/5.15.0/msvc2019_64
        key: ${{ runner.os }}-qt-5.15.0-msvc2019_64

    - name: Install Qt from web (Windows)
      if: startsWith(matrix.os, 'windows') && steps.cache-qt-windows.outputs.cache-hit != 'true'
      shell: powershell
      run: |
        mkdir "C:\\Qt"
        cd "C:\\Qt"
        pip install aqtinstall
        cmd /c 'python 2>&1' -m aqt install 5.15.0 windows desktop win64_msvc2019_64
        dir

    - name: Setup Environment (Ubuntu)
      if: startsWith(matrix.os, 'ubuntu')
      run: |
        if [ "${{ matrix.compiler }}" = "gcc" ]; then
          echo "CC=gcc-${{ matrix.version }}" >> $GITHUB_ENV
          echo "CXX=g++-${{ matrix.version }}" >> $GITHUB_ENV
        else
          echo "CC=clang-${{ matrix.version }}" >> $GITHUB_ENV
          echo "CXX=clang++-${{ matrix.version }}" >> $GITHUB_ENV
        fi
        echo "QTDIR=$PWD/build/5.15.0/gcc_64" >> $GITHUB_ENV
        echo "VULKAN_SDK=$PWD/vulkan" >> $GITHUB_ENV

    - name: Setup Environment (Windows)
      if: startsWith(matrix.os, 'windows')
      shell: powershell
      run: |
        echo "VULKAN_SDK=C:\\VulkanSDK\\1.2.182.0" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "QTDIR=C:\\Qt\\5.15.0\\msvc2019_64" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    - name: Configure (Ubuntu)
      if: startsWith(matrix.os, 'ubuntu')
      run: |
        cd build
        cmake -G Ninja -DCMAKE_TOOLCHAIN_FILE=./vcpkg/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=x64-linux-release -DVCPKG_HOST_TRIPLET=x64-linux-release -DCMAKE_BUILD_TYPE=Release -DDECAF_BUILD_TOOLS=ON -DDECAF_VULKAN=ON -DDECAF_QT=ON -DCMAKE_PREFIX_PATH=$QTDIR -DCMAKE_INSTALL_PREFIX=install ..

    - name: Configure (Windows)
      if: startsWith(matrix.os, 'windows')
      shell: cmd
      run: |
        cd build
        cmake -DCMAKE_TOOLCHAIN_FILE=./vcpkg/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=x64-windows-release -DVCPKG_HOST_TRIPLET=x64-windows-release -DCMAKE_BUILD_TYPE=Release -DDECAF_BUILD_TOOLS=ON -DDECAF_VULKAN=ON -DDECAF_QT=ON -DCMAKE_PREFIX_PATH=%QTDIR% -DCMAKE_INSTALL_PREFIX=install ..

    - name: Build
      run: |
        cd build
        cmake --build . --config Release -j 2 --target install

    - uses: actions/upload-artifact@master
      with:
        name: decaf-emu-${{ matrix.os }}
        path: build/install
